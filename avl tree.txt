#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data,ht;
    struct node *left,*right;
}node;

node *insert(node *,int);
node *delete(node *,int);
void preorder(node *);
void inorder(node *);
int height(node *);
node *rotateright(node *);
node *rotateleft(node *);
node *RR(node *);
node *RL(node *);
node *LL(node *);
node *LR(node *);
int BF(node *);

int main()
{
    node *root = 0;
    int x,n,i,c;
    
    do{
        printf("\n1.create \n2.insert \n3.delete \n4.print \n5.quit");
        printf("\n enter your choice:");
        scanf("%d",&c);
        switch(c)
        {
            case 1:
            printf("\nenter no of elements:");
            scanf("%d",&n);
            printf("\nenter the data:");
            root=0;
            for(i=0;i<n;i++){
                scanf("%d",&x);
                root=insert(root,x);
            }
            break;
            
            case 2:
            printf("\nenter the data:");
            scanf("%d",&x);
            root=insert(root,x);
            break;
            
            case 3:
            // printf("\nenter the data:");
            // scanf("%d",&x);
            // root=delete(root,x);
            break;
            
            case 4:
            printf("\npreorder traversal is:");
            preorder(root);
            printf("\ninorder traversal is:");
            inorder(root);
            break;
        }
    } while(c!=5);
    return 0;
}

node *insert(node *T,int x){
    if(T==0)
    {
        T=(node *)malloc(sizeof(node));
        T->data=x;
        T->right=0;
        T->left=0;
    }
    else
        if(x>T->right)
        {
            T->right=insert(T->right,x);
            if(BF==-2)
              if(x>T->right->data)
                 T=RR(T);
              else
                 T=RL(T);
        }
        else
            if(x<T->left)
            {
                T->left=insert(T->left,x);
                if(BF==2)
                   if(x<T->left->data)
                      T=LL(T);
                   else
                      T=LR(T);
            }
        T->ht=height(T);
        
        return(T);
        
}

int height(node *T)
{
    int lh,rh;
    if(T==0)
       return 0;
    
    if(T->left==0)
        lh=0;
    else
        lh=1+T->left->ht;
    
    if(T->right==0)
        rh=0;
    else
        rh=1+T->right->ht;
        
    if(lh>rh)  
       return(lh);
       
return(rh);
}

node *rotateright(node *X)
{
  node *y;
  y=X->data;
  X->left=y->right;
  y->right=X;
  
  X->ht=height(X);
  y->ht=height(y);
  return(y);
}

node *rotateleft(node *X)
{
    node *y;
    y=X->data;
    X->right=y->left;
    y->left=X;
    y->ht=height(y);
    X->ht=height(X);
    
    return(y);
}

node *RR(node *T)
{
    T=rotateleft(T);
    return(T);
}

node *LL(node *T)
{
    T=rotateright(T);
    return(T);
}

node *RL(node *T)
{
    T->right=rotateright(T->right);
    T=rotateleft(T);
    
    return(T);
}

node *LR(node *T)
{
    T->left=rotateleft(T->left);
    T=rotateright(T);
    
    return(T);
}

int BF(node *T)
{
    int lh,rh;
    if(T==0)
       return 0;
    
    if(T->left==0)
        lh=0;
    else
        lh=1+T->left->ht;
    
    if(T->right==0)
        rh=0;
    else
        rh=1+T->right->ht;
        
    return(lh-rh);    
}

void preorder(node *T)
{
    if(T!=0)
    {
    printf("%d(BF=%d) ",T->data,BF(T));
    preorder(T->left);
    preorder(T->right);
    }
}

void inorder(node *T)
{
    if(T!=0)
    {
        inorder(T->left);
        printf("%d(BF=%d) ",T->data,BF(T));
        inorder(T->right);
    }
}
